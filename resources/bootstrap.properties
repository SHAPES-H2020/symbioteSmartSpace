spring.application.name=AuthenticationAuthorizationManager
spring.cloud.config.enabled=false
eureka.client.enabled=false
spring.zipkin.enabled=false
logging.level.eu.h2020.symbiote=DEBUG



#port on which the AAM should listen for operations
server.port=8080
#8443
aam.database.name=symbiote-aam-database
logging.file=logs/AuthenticationAuthorizationManager.log



# added 12-10-2021 ONLY FOR DOCKER IS USED
spring.data.mongodb.host=symbiote-mongo
aam.database.host=${spring.data.mongodb.host}




# AAM settings
# username and password of the AAM module (of your choice) -- master password used to manage your AAM (e.g. register new users), not your credentials in the Core, you need to put matching values in the SSP middleware configuration
aam.deployment.owner.username={YOUR_OWNER_USERNAME}
aam.deployment.owner.password={YOUR_OWNER_PASSWORD}



# absolute path to the saam-keystore.p12 file
aam.security.KEY_STORE_FILE_NAME=file:///#{systemProperties['user.dir']}/saam-keystore.p12



# name of the root ca certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.ROOT_CA_CERTIFICATE_ALIAS=caam



# name of the certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.CERTIFICATE_ALIAS=saam



# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=pass



# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=pass



# HTTPS only
# name of the keystore containing the letsencrypt (or other) certificate and key pair for your AAM host's SSL, you need to put it also in your src/main/resources directory
#server.ssl.key-store=classpath:TODO.p12
# SSL keystore password
#server.ssl.key-store-password=TODO
# SSL certificate private key password
#server.ssl.key-password=TODO
# http to https redirect
#security.require-ssl=TODO




# Cache settings. If validated token is in cache, component certificate or available AAMs were aquired recently, value from cache is returned to avoid communication with another AAM. In case of missing, default values are used.
# time (in milliseconds) for which valid token should be cached (DEFAULT: 60000)
aam.cache.validToken.expireMillis=60000
# size of validToken cache. If size set to -1, validToken cache has no limit. (DEFAULT: 1000)
aam.cache.validToken.size=1000
# time (in seconds) for which componentCertificate should be cached (DEFAULT: 60)
aam.cache.componentCertificate.expireSeconds=60
# time (in seconds) for which availableAAMs should be cached (DEFAULT: 60)
aam.cache.availableAAMs.expireSeconds=60



#JWT validity time in milliseconds - how long the tokens issued to your users (apps) are valid... think maybe of an hour, day, week?
aam.deployment.token.validityMillis=60000
# allowing offline validation of foreign tokens by signature trust-chain only. Useful when foreign tokens are expected to be used along with no internet access
aam.deployment.validation.allow-offline=false



# needed to offer available aams service
symbIoTe.core.interface.url={YOUR_CORE_ADDRESS}/coreInterface



# needed to expose oneself to other components
symbIoTe.localaam.url=http://symbiote-aam:8080
#was http://localhost



# the external address for client to reach the AAM from the Internet
symbIoTe.interworking.interface.url={YOUR_SMART_SPACE_DOMAIN_NAME}



################ TO DO CHECK IT MUST BE EQUAL TO Site Local Address in Admin gui #####
symbIoTe.siteLocal.url=http://local.com
#was http://localhost



# profile activating smart space AAM functionalities (do not change the value!)
spring.profiles.active=smart_space